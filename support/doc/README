Description: 
===========
gonvert is a conversion utility that allows conversion between many units 
like CGS, Ancient, Imperial with many categories like length, mass, numbers, 
etc. All units converted values shown at once as you type. Easy to add/change 
your own units. Written in Python,pygtk,libgade. 


Goals:
=====
The goal when making gonvert was to have the most complete and easy to use 
unit conversion utility. It is still growing as I find new units.


Contact:
========
 anthony@unihedron.com 


INSTALLATION:
=============
See INSTALL for installation notes


USAGE:
======
- Start the program by typing "gonvert".
- Select the category of units that you want to convert.
- Select the unit that want to enter a value for.
- Type the value.
- The top two rows on the right side are temporary locations that scroll 
  through each unit you select. You can use this area to convert
  between one unit and another without scrolling through the entire list
  units.


Other features:
===============
- You can sort Units and Value columns by clicking on the column name.
- You can print (to STDOUT) out all the units by selecting Tools>Write_Units
- You can find units by typing the name of the desired unit at the bottom
  input field then pressing the Find butonn or hitting enter.
  The number of units found that match the desired string is displayed
  in the label at the bottom right. F6 key also acts as the Find button.
- previously selected categories and units are saved to ~/.gonvert/ directory



Warranty:
=========
The usual disclaimer, I am not responsible for any damages this program may
cause. Use at your own risk. See COPYING for license.


Making additions and changes:
=============================
If you make corrections or additions to the program, please e-mail me so that I
can incorporate them into the source (with credit to your name of course).
Please keep in mind that this project is GPL (see COPYING file) so do not use
copyrighted material in your changes/additions to the unit descriptions that you
submit to me.

Make sure that all standard calculations using the m() function have floating
point arguments. In other words use at least one number in the formula with a
decimal point to force floating point numbers:
 (m,5/2)	#this is bad (the result will be 2, not 2.5)
 (m,5.0/2)	#this forces float (good, the result will be 2.5)


Without knowing Python:
You can alter the code without knowing much about Python just be reviewing the
method that the units definitions were written. Be careful to include the same
number of starting and ending brackets, also be careful of the commas.

If you want to use mathematical functions like pi etc you can see what other
functions there are as follows:

# python
>>>from math import *
>>>dir()
['__builtins__', '__doc__', '__name__', 'acos', 'asin', 'atan', 'atan2', 'ceil',
'cos', 'cosh',  'e', 'exp', 'fabs', 'floor', 'fmod', 'frexp', 'hypot', 'ldexp',
'log', 'log10', 'modf', 'pi', 'pow', 'sin', 'sinh', 'sqrt', 'tan',  'tanh']


A good book for learning Python is the O'Reilly "Learning Python" book by 
Mark Lutz and David Ascher.








Location of installed gonvert software is put into directories suggested by 
then manpage hier (man hier).

 /usr/bin
	gonvert program (this is the source)

 /usr/doc
	gonvert documentation files.

 /usr/lib
	Files associated with gonvert like the glade file and the pixmaps.

 /usr/man
	gonvert Man page (when one is written)

 ~/.gonvert
	user configuration files associated with gonvert.



